// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each for each block";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "in list";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "for each item";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO = "from %1 to %2";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "from %1 to %2 by %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "count with";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable %1 take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "repeat";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.HELP = "Help";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if text is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LISTS_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_QUYU = "Returns the first number on the second number remainder.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "by";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "change";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_ABS='abs';
Blockly.Msg.MATH_SQ='sq';
Blockly.Msg.MATH_SQRT='sqrt';
Blockly.Msg.MATH_LOG='log';
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_SQ = "Return the square of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_TOINT = "Returns the integer part a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROUND = "Returns the integer part a number using around.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_CEIL = "Returns the integer part a number using ceil.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_FLOOR = "Returns the integer part a number using floor.";

Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_QUYU_SYMBOL="%";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "New variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "do";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "do";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "procedure";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT = "char at";
Blockly.Msg.TEXT_CHARAT2 = "";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of first text in the second text. Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_WRITE_TOOLTIP = "Write the specified text, number or other value.";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PRINT_HEX_TOOLTIP = "Print the specified number in hexadecimal format.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_CHAR_TOOLTIP = "A character.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TODAY = "Today";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TAIL = "to";
Blockly.Msg.VARIABLES_SET_TITLE = "set";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
//luokailiang
Blockly.MIXLY_PINMODE = 'pinMode';
Blockly.MIXLY_PINMODEIN = 'INPUT';
Blockly.MIXLY_PINMODEOUT = 'OUTPUT';
Blockly.MIXLY_PINMODEPULLUP = 'INPUT_PULLUP';
Blockly.MIXLY_DECLARE='Declare';
Blockly.MIXLY_AS='as';
Blockly.MIXLY_VALUE='value';
Blockly.MIXLY_VALUE2='value';
Blockly.MIXLY_MAP='Map ';
Blockly.MIXLY_MAP_FROM="from [";
Blockly.MIXLY_MAP_TO="] to [";
Blockly.MIXLY_MILLIS='millis';
Blockly.MIXLY_DELAY='Delay';
Blockly.MIXLY_ATTACHINTERRUPT_PIN='attachInterrupt pin#';
Blockly.MIXLY_DETACHINTERRUPT_PIN = 'detachInterrupt pin#';
Blockly.MIXLY_ATTACHPININTERRUPT_PIN = 'attachPinInterrupt pin#';
Blockly.MIXLY_DETACHPININTERRUPT_PIN = 'detachPinInterrupt pin#';
Blockly.MIXLY_MODE='mode';
Blockly.MIXLY_DO='do';
Blockly.MIXLY_BUILDIN_LED='Build-in LED ';
Blockly.MIXLY_STAT='Stat';
Blockly.MIXLY_DIGITALWRITE_PIN='DigitalWrite PIN#';
Blockly.MIXLY_DIGITALREAD_PIN='DigitalRead PIN#';
Blockly.MIXLY_ANALOGWRITE_PIN='AnalogWrite PIN#';
Blockly.MIXLY_ANALOGREAD_PIN='AnalogRead PIN#';
Blockly.MIXLY_SERIAL_WRITE = 'write';
Blockly.MIXLY_SERIAL_PRINT = 'print';
Blockly.MIXLY_SERIAL_PRINTLN='println';
Blockly.MIXLY_SERIAL_PRINT_HEX='println(hex)';
Blockly.MIXLY_SERIAL_FLUSH='flush';
Blockly.MIXLY_STEP='step';
Blockly.MIXLY_TONE_PIN='Tone PIN#';
Blockly.MIXLY_FREQUENCY='frequency';
Blockly.MIXLY_DURATION='duration';
Blockly.MIXLY_NOTONE_PIN='noTone PIN#';
Blockly.MIXLY_BLOCKGROUP_CATEGORY='BlockGroup';
Blockly.MIXLY_IR_RECEIVE='IRreceive PIN#';
Blockly.MIXLY_IR_RECEIVE_ENABLE='enableIRIn PIN#';
Blockly.MIXLY_IR_SEND_NEC1='IRsend'
Blockly.MIXLY_IR_SEND_NEC2=' PIN#'
Blockly.MIXLY_IR_RECEIVE_RAW='IRreceive(Print RAW Data) PIN#';
Blockly.MIXLY_IR_SEND_RAW='IRsend(RAW) PIN#'
Blockly.LANG_MATH_TO_INT = 'toInt';
Blockly.LANG_MATH_TO_ROUND = 'Round';
Blockly.LANG_MATH_TO_CEIL = 'Ceil';
Blockly.LANG_MATH_TO_FLOOR = 'Floor';
Blockly.MIXLY_SERVO='Servo';
Blockly.MIXLY_PIN='PIN#';
Blockly.MIXLY_DEGREE_0_180='Degree (0~180)';
Blockly.MIXLY_READ_DEGREES='Read Degrees';
Blockly.MIXLY_HIGH='HIGH';
Blockly.MIXLY_LOW='LOW';
Blockly.MIXLY_ON='ON';
Blockly.MIXLY_OFF='OFF';
Blockly.MIXLY_RISING='RISING';
Blockly.MIXLY_FALLING='FALLING';
Blockly.MIXLY_CHANGE='CHANGE';
Blockly.MIXLY_I2C_MASTER_WRITE="I2C_Write device";
Blockly.MIXLY_I2C_MASTER_READ="I2C_Read device";
Blockly.MIXLY_I2C_MASTER_READ2="I2C_Read";
Blockly.MIXLY_I2C_VALUE="value"
Blockly.MIXLY_I2C_BYTES="bytes";
Blockly.MIXLY_I2C_AVAILABLE='I2C isAvailable?';
Blockly.LANG_CONTROLS_FOR_INPUT_WITH = 'count with';
Blockly.LANG_CONTROLS_FOR_INPUT_VAR = 'x';
Blockly.LANG_CONTROLS_FOR_INPUT_FROM = 'from';
Blockly.LANG_CONTROLS_FOR_INPUT_TO = 'to';
Blockly.LANG_CONTROLS_FOR_INPUT_DO = 'do';
Blockly.LANG_CONTROLS_WHILEUNTIL_TITLE_REPEAT = 'repeat';
Blockly.LANG_CONTROLS_WHILEUNTIL_INPUT_DO = 'do';
Blockly.LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE = 'while';
Blockly.LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = 'until';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP = 'of loop';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = 'break out';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = 'continue with next iteration';
Blockly.LANG_CONTROLS_FLOW_STATEMENTS_WARNING = 'Warning:\n' +
    'This block may only\n' +
    'be used within a loop.';
Blockly.LANG_MATH_LONG = 'long';
Blockly.LANG_MATH_INT = 'int';
Blockly.LANG_MATH_FLOAT = 'float';
Blockly.LANG_MATH_BOOLEAN = 'boolean';
Blockly.LANG_MATH_BYTE = 'byte';
Blockly.LANG_MATH_CHAR = 'char';
Blockly.LANG_MATH_STRING = 'string';
Blockly.LANG_LISTS_GET_INDEX1 = 'get item at';
Blockly.LANG_LISTS_GET_INDEX2 = '';
Blockly.LANG_LISTS_GET_INDEX_TOOLTIP = 'Returns the value at the specified position in a list.';
Blockly.LANG_LISTS_SET_INDEX1 = 'set item at';
Blockly.LANG_LISTS_SET_INDEX2 = 'to';
Blockly.LANG_LISTS_SET_INDEX_TOOLTIP = 'Sets the value at the specified position in a list.';
Blockly.LANG_MATH_CONSTRAIN_INPUT_CONSTRAIN = 'Constrain';
Blockly.LANG_MATH_CONSTRAIN_INPUT_LOW = 'between (low)';
Blockly.LANG_MATH_CONSTRAIN_INPUT_HIGH = 'and (high)';
Blockly.LANG_MATH_RANDOM_SEED = 'random seed';
Blockly.LANG_MATH_RANDOM_INT_INPUT_FROM = 'random integer from';
Blockly.LANG_MATH_RANDOM_INT_INPUT_TO = 'to';
Blockly.MIXLY_DF_LED='LED';
Blockly.MIXLY_DF_BUZZER='Buzzer';
Blockly.MIXLY_DF_BTN='Button';
Blockly.MIXLY_DF_VIBRATION='Vibration';
Blockly.MIXLY_DF_TILT='Tilt';
Blockly.MIXLY_DF_TOUCH='Touch';
Blockly.MIXLY_DF_MAGNETIC='Magnetic';
Blockly.MIXLY_DF_PYROELECTRIC_INFRARED='Pyroelectric infrared';
Blockly.MIXLY_MB_PYROELECTRIC_INFRARED='PIR Motion';
Blockly.MIXLY_DF_JOYSTICK_D='Joystick button';
Blockly.MIXLY_DF_JOYSTICK_A='Joystick';
Blockly.MIXLY_JOYSTICK='Joystick';
Blockly.MIXLY_DF_POTENTIOMETER='Potentiometer';
Blockly.MIXLY_POTENTIOMETER='Potentiometer';
Blockly.MIXLY_DF_ROTATION='Rotation';
Blockly.MIXLY_DF_VOLTAGE='Voltage';
Blockly.MIXLY_DF_PIEZO_DISK_VIRBRATION='Piezo disk virbration';
Blockly.MIXLY_DF_SOUND='Sound';
Blockly.MIXLY_SOUND='Sound';
Blockly.MIXLY_DF_RELAY='Relay';
Blockly.MIXLY_DF_LIGHT='Light';
Blockly.MIXLY_DF_GRAYSCALE='Grayscale';
Blockly.MIXLY_DF_FLAME='Flame';
Blockly.MIXLY_DF_TEMPERATURE='Temperature';
Blockly.MIXLY_TEMPERATURE='Temperature(℃)';
Blockly.MIXLY_DF_ACCELEROMETER='Accelerometer';
Blockly.MIXLY_DF_MOISTURE='Moisture';
Blockly.MIXLY_DF_WATER='Water';
Blockly.MIXLY_DF_CO='Carbon monoxide';
Blockly.MIXLY_DF_SHARP_GP2Y0A21='Sharp GP2Y0A21';
Blockly.MIXLY_MAKELISTFROM='make list from text';
Blockly.MIXLY_SPLITBYDOU='';
Blockly.MIXLY_SETUP='setup';
Blockly.MIXLY_WARNING_INTERRUPT='This pin cannot be interrupted!';
Blockly.MIXLY_CHAOSHENGBO='Ultrasonic ranging(cm) ';
Blockly.MIXLY_MB_CHAOSHENGBO='Ultrasonic ranging';
Blockly.MIXLY_IR_RECEIVE_YES='Received';
Blockly.MIXLY_IR_RECEIVE_NO='NotReceived';
Blockly.LANG_VARIABLES_SET_TITLE='';
Blockly.MIXLY_TEXT_JOIN='join';
Blockly.MIXLY_SERIAL_AVAILABLE = 'isAvailable?';
Blockly.MIXLY_SERIAL_EVENT = 'serialEvent';
Blockly.MIXLY_SERIAL_READSTR='readString';
Blockly.MIXLY_SERIAL_READSTR_UNTIL='readStringUntil';
Blockly.MIXLY_SERIAL_READ='';
Blockly.MIXLY_IR_RECIEVE_TOOLTIP='Do something when receiving infrared signals.';
Blockly.MIXLY_IR_SEND_NEC_TOOLTIP='Sends Infrared signals of the specified type';
Blockly.MIXLY_IR_RECIEVE_RAW_TOOLTIP='Print the Infrared signal in RAW type when receiving it.';
Blockly.MIXLY_IR_SEND_RAW_TOOLTIP='Sends RAW Infrared signals (set pin number, list, length of list and IR frequency)';
Blockly.MIXLY_LIST_NAME='list';
Blockly.MIXLY_LIST_LENGTH='listLength';
Blockly.MIXLY_TO_INT='toInt';
Blockly.MIXLY_TO_FLOAT='toFloat';
Blockly.MIXLY_DATA="data";
Blockly.MIXLY_BITS="bits";
Blockly.MIXLY_MB_LIGHT_GRAYSCALE='Light and Grayscale Sensor';
Blockly.MIXLY_MB_LIGHT_GRAYSCALE_LED=' LED set';
Blockly.MIXLY_MB_LIGHT_MOTOR='Set Motor';
Blockly.MIXLY_MB_LIGHT_MOTOR_SPEED=' Speed(-255~255)';
Blockly.MIXLY_DELAY_MS='ms';
Blockly.MIXLY_DELAY_US = 'μs';
Blockly.MIXLY_PIN = 'PIN#';
Blockly.MIXLY_GETTEMPERATUE = 'getTemperature';
Blockly.MIXLY_GETHUMIDITY = 'getHumidity';
Blockly.MIXLY_DHT11='DHT11 PIN#';
Blockly.MIXLY_DHT11_T='getTemperature';
Blockly.MIXLY_DHT11_H='getHumidity';
Blockly.MIXLY_LCD_RGB_BACKLIGHT='LCD RGB Backlight';
Blockly.MIXLY_DF_LCD='LCD';
Blockly.MIXLY_LCD_PRINT1='print line1';
Blockly.MIXLY_LCD_PRINT2='print line2';
Blockly.MIXLY_LCD_PRINT3='print line3';
Blockly.MIXLY_LCD_PRINT4='print line4';
Blockly.MIXLY_LCD_ROW='row';
Blockly.MIXLY_LCD_COLUMN='column';
Blockly.MIXLY_LCD_PRINT='print';
Blockly.MIXLY_LCD_SETCOLOR='setColor';
Blockly.MIXLY_LCD_STAT_ON='On';
Blockly.MIXLY_LCD_STAT_OFF='Off';
Blockly.MIXLY_LCD_STAT_CURSOR='Cursor';
Blockly.MIXLY_LCD_STAT_NOCURSOR='noCursor';
Blockly.MIXLY_LCD_STAT_BLINK='Blink';
Blockly.MIXLY_LCD_STAT_NOBLINK='noBlink';
Blockly.MIXLY_LCD_STAT_CLEAR='Clear';
Blockly.MIXLY_7S_DISPLAY='7 Segment Display';
Blockly.MIXLY_NUMBER='number';
Blockly.MIXLY_BLUETOOTH='Bluetooth';
Blockly.MIXLY_BLUETOOTH_READ_STR='readString';
Blockly.MIXLY_AVAILABLE='available?';
Blockly.MIXLY_DATAPIN='dataPin#';
Blockly.MIXLY_CLOCKPIN='clockPin#';
Blockly.MIXLY_BITORDER='bitOrder';
Blockly.MIXLY_MSBFIRST='MSBFIRST';
Blockly.MIXLY_LSBFIRST='LSBFIRST';
Blockly.MIXLY_TOSTRING = 'toString';
Blockly.MIXLY_TOCHAR = 'toChar';
Blockly.MIXLY_TOASCII = 'toAscii';
Blockly.MIXLY_ROMEO_MOTOR='Romeo motor';
Blockly.MIXLY_ROMEO_MOTOR_SPEED='speed';
Blockly.MIXLY_STOP='stop';
Blockly.MIXLY_PULSEIN='pulseIn(μs) PIN#';
Blockly.MIXLY_PULSEIN_STAT='state';
Blockly.MIXLY_PULSEIN_TIMEOUT='timeout(μs)';
Blockly.MIXLY_SERIAL_READ_INT='parseInt';
Blockly.MIXLY_SERIAL_READ_FLOAT='parseFloat';
Blockly.MIXLY_MAX='max';
Blockly.MIXLY_MIN='min';
Blockly.MIXLY_WRITE_SD_FILE='Write SD File';
Blockly.MIXLY_SD_DATA='Data';
Blockly.MIXLY_SD_NEWLINE='NewLine';
Blockly.MIXLY_EEPROM_WRITE_LONG='Write(long) EEPROM address';
Blockly.MIXLY_EEPROM_READ_LONG='Read(long) EEPROM address';
Blockly.MIXLY_EEPROM_WRITE_BYTE='Write(byte) EEPROM address';
Blockly.MIXLY_EEPROM_READ_BYTE='Read(byte) EEPROM address';
Blockly.MIXLY_SENSE_MOTOR='Set Motor Speed(-255~255)';
Blockly.MIXLY_SENSE_MOTOR_STOP='Stop Motor';
Blockly.MIXLY_SENSE_SERVO='Set Servo Angle';
Blockly.MIXLY_SENSE_RGBLED='Set RGB LED\'s Color ';
Blockly.MIXLY_TRAFFIC_LED='Set Traffic LED';
Blockly.MIXLY_EAST='EAST';
Blockly.MIXLY_SOUTH='SOUTH';
Blockly.MIXLY_WEST='WEST';
Blockly.MIXLY_NORTH='NORTH';
Blockly.MIXLY_SENSE_BUZZER='Set Buzzer';
Blockly.MIXLY_SENSE_ULTRASONIC='Ultrasonic Value';
Blockly.MIXLY_SENSE_PYROELECTRIC_INFRARED='PIR Motion?';
Blockly.MIXLY_BUTTON='Button';
Blockly.MIXLY_UP='UP';
Blockly.MIXLY_DOWN='DOWN';
Blockly.MIXLY_LEFT='LEFT';
Blockly.MIXLY_RIGHT='RIGHT';
Blockly.MIXLY_MID='MID';
Blockly.MIXLY_IS_PRESSED='is pressed?';
Blockly.MIXLY_SENSE_SLIDING='Sliding Potentiometer Value';
Blockly.MIXLY_SENSE_TEMPERATURE='Temperature Value';
Blockly.MIXLY_SENSE_HUMIDITY='Humidity Value';
Blockly.MIXLY_SENSE_SOUND='Sound Value';
Blockly.MIXLY_SENSE_LIGHT='Light Value';
Blockly.MIXLY_SENSE_WEIGHT='Weight Value';
Blockly.MIXLY_SENSE_IR='IR Received:';
Blockly.MIXLY_SENSE_DIGITAL_DISPLAY='Set LED Digital Display(0~99)';
Blockly.MIXLY_SENSE_DIGITAL_DISPLAY_CLOSE='Close LED Digital Display';
Blockly.MIXLY_SENSE_LED_MATRIX='Set LED Matrix(0~9)';
Blockly.MIXLY_SENSE_LED_MATRIX_CLOSE='Close LED Matrix';
Blockly.LANG_INOUT_DIGITAL_WRITE_TOOLTIP='Write digital value to a specific Port';
Blockly.MIXLY_FORWARD='run forward';
Blockly.MIXLY_BACKWARD='run backward';
Blockly.MIXLY_TURNLEFT='turn left';
Blockly.MIXLY_TURNRIGHT='turn right';
Blockly.MIXLY_MBOT_SPEED='at speed(-255~255)';
Blockly.MIXLY_RUNTIME='System running time';
Blockly.MIXLY_LED_ON_BOARD='led on board';
Blockly.MIXLY_ALL='all';
Blockly.MIXLY_SET_LED='Set LED';
Blockly.MIXLY_MBOT_TONE='Play tone';
Blockly.MIXLY_MBOT_NOTONE='Stop tone';
Blockly.MIXLY_SHOW_FACE='Show face';
Blockly.MIXLY_SHOW_FACE_TEXT='characters:';
Blockly.MIXLY_SHOW_FACE_TIME='time';
Blockly.MIXLY_MBOT_SET_DISPLAY='Set 7-segments display';
Blockly.MIXLY_MBOT_SET_LIGHT='Set light sensor';
Blockly.MIXLY_MBOT_SET_LIGHT_LED='led as';
Blockly.MIXLY_MBOT_SET_CAMERA='Set camera shutter';
Blockly.MIXLY_MBOT_SET_CAMERA_STAT='as';
Blockly.MIXLY_MBOT_SET_CAMERA_PRESS='Press';
Blockly.MIXLY_MBOT_SET_CAMERA_RELEASE='Release';
Blockly.MIXLY_MBOT_SET_CAMERA_FOCUS_ON='Focus On';
Blockly.MIXLY_MBOT_SET_CAMERA_FOCUS_OFF='Focus Off';
Blockly.MIXLY_MBOT_LIGHT_SENSOR='Light sensor';
Blockly.MIXLY_LIGHT_SENSOR_ON_BOARD='light sensor on board';
Blockly.MIXLY_MBOT_BUTTON='Button';
Blockly.MIXLY_MBOT_BUTTON_PRESSED='pressed';
Blockly.MIXLY_MBOT_BUTTON_RELEASED='released';
Blockly.MIXLY_MBOT_LINE_FOLLOWER='Line follower';
Blockly.MIXLY_MBOT_JOYSTICK='Joystick';
Blockly.MIXLY_MBOT_JOYSTICK_X='X-Axis';
Blockly.MIXLY_MBOT_JOYSTICK_Y='Y-Axis';
Blockly.MIXLY_MBOT_POTENTIOMETER='Potentiometer';
Blockly.MIXLY_MBOT_SOUND_SENSOR='Sound sensor';
Blockly.MIXLY_MBOT_LIMIT_SWITCH='Limit switch';
Blockly.MIXLY_MBOT_TEMPERATURE='Temperature';
Blockly.MIXLY_MBOT_PIR_MOTION_SENSOR='Pir motion sensor';
Blockly.MIXLY_MBOT_IR_REMOTE='Ir remote';
Blockly.MIXLY_MBOT_IR_REMOTE_PRESSED='pressed';
Blockly.MIXLY_SETTING='setting';
Blockly.MIXLY_SEND_MBOT_MESSAGE='Send mBot\'s message';
Blockly.MIXLY_MBOT_MESSAGE_RECEIVED='mBot\'s message received';
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT='Robot movement';
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT_GO_FORWARD='go forward;'
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT_STOP='stop';
Blockly.MIXLY_LABPLUS_ROBOT_MOVEMENT_GO_BACK='go back';
Blockly.MIXLY_LABPLUS_ROBOT='Robot';
Blockly.MIXLY_LABPLUS_ROBOT_TURN_LEFT='turn left';
Blockly.MIXLY_LABPLUS_ROBOT_TURN_RIGHT='turn right';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY='Set led matrix to';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_SMILE='smile';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_NOSMILE='sad';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_CLOSE_EYE='close eyes';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_LEFT='left arrow';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_RIGHT='right arrow';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_TIAOWEN='stripe';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_ZEBRA='zebra';
Blockly.MIXLY_LABPLUS_ROBOT_DISPLAY_NOTHING='nothing';
Blockly.MIXLY_LABPLUS_ROBOT_LED_TOP='Set led on top to';
Blockly.MIXLY_LABPLUS_ROBOT_LED_SIDE='Set side leds\' color to';
Blockly.MIXLY_LCD_ADDRESS="address";
var MSG = {
  catInOut: "In/Out",
  catControl: "Control",
  catMath: "Math",
  catText: "Text",
  catLists: "Lists",
  catLogic: "Logic",
  catSerialPort:"SerialPort",
  catGroup: "Communicate",
  catStorage:"Storage",
  catSensor: "Sensor",
  catActuator: "Actuator",
  catMonitor:"Monitor",
  catVar: "Variables",
  catFun: "Functions",
  catEthernet:"Ethernet",
  catEthernet_init:"Init",
  catEthernet_clinet:"Client",
  catSense: "Labplus(Box)",
  catSense2: "Labplus(Robot)",
  catLuxe:"LuxeRobot",
  tab_blocks: "Blocks",
  tab_arduino: "Code",
  copyright:"Copyright © Mixly Team@BNU  insect.trtos.com",
  viewNormal:"Normal",
  viewAdvanced:"Advanced"
};
Blockly.MIXLY_TOOLTIP_INOUT_HIGHLOW='Returns high or low voltage.';
Blockly.MIXLY_TOOLTIP_INOUT_DIGITAL_READ='Returns digital value of a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_ANALOG_WRITE='Writes analog value between 0 and 255 to a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_ANALOG_READ='Returns value between 0 and 1023 of a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_ATTACHINTERRUPT='Attachs interrupt to a specific Port';
Blockly.MIXLY_TOOLTIP_INOUT_DETACHINTERRUPT='Detachs interrupt to a specific Port';
Blockly.MIXLY_TOOLTIP_CONTROL_SETUP='Initialization(run only once)';
Blockly.MIXLY_TOOLTIP_CONTROL_DELAY='Delays specific time';
Blockly.MIXLY_TOOLTIP_CONTROL_MILLIS='Returns the system running time';
Blockly.MIXLY_TOOLTIP_VARIABLES_DECLARE='Declare and initialize a variable';
Blockly.MIXLY_TOOLTIP_MATH_MAX='Returns the larger number';
Blockly.MIXLY_TOOLTIP_MATH_MIN='Returns the smaller number';
Blockly.MIXLY_TOOLTIP_MATH_MAP='Maps a number from the first interval to the second interval.';
Blockly.MIXLY_TOOLTIP_TEXT_JOIN='Creates a piece of text by joining together two piece of text.';
Blockly.MIXLY_TOOLTIP_TEXT_TOTEXT = 'Converts a number into a string.';
Blockly.MIXLY_TOOLTIP_TEXT_TOCHAR = 'Returns the char corresponding to an ASCII code.';
Blockly.MIXLY_TOOLTIP_TEXT_TOASCII = 'Returns the ASCII code corresponding to a char.';
Blockly.MIXLY_TOOLTIP_TEXT_TOINT='Converts a string into an integer.';
Blockly.MIXLY_TOOLTIP_TEXT_TOFLOAT='Converts a string into an float.';
Blockly.MIXLY_TOOLTIP_LISTS_CREATE_WITH_TEXT = "Creates a list from a text.";
Blockly.MIXLY_TOOLTIP_LOGIT_TRUEORFALSE='If the first number is true, the second number is returned, otherwise the third number.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_AVAILABLE='If the serial port is available, it returns true, otherwise returns false.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_READ_STR='Returns a string in serial port.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_READ_INT='Returns a integer in serial port.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERIAL_READ_FLOAT='Returns a float in serial port.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_CHAOSHENGBO='Returns the distance of ultrasonic sensor measured.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_GET_TEM='Returns the temperature of dht11 sensor measured.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_GET_HUM = 'Returns the humidity of dht11 sensor measured.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERVO_MOVE = 'Moves between 0~180 degree.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_SERVO_READ = 'Returns that degree with the last servo move.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_TONE = 'Play sound at the specified frequency.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_TONE2 = 'Play sound according to the specified frequency and duration.';
Blockly.MIXLY_TOOLTIP_BLOCKGROUP_NOTONE = 'Stop playing sound.';
Blockly.LUXE_LED='LED #';
Blockly.LUXE_MOTOR='Motor #';
Blockly.LUXE_STAT='Stat';
Blockly.LUXE_SPEED='Speed';
Blockly.LUXE_DIR='Direction';
Blockly.LUXE_LED_ON='ON';
Blockly.LUXE_LED_OFF='OFF';
Blockly.LUXE_MOTOR_FORWARD='Clockwise';
Blockly.LUXE_MOTOR_REVERSE='Counterclockwise';
Blockly.LUXE_LED_CHANGE='change';
Blockly.LUXE_MOTOR_CHANGE='changeDirection';
Blockly.LUXE_MOTOR_STOP='stop';
Blockly.LUXE_SPEAKER_PLAYSOUND='Play sound';
Blockly.LUXE_SPEANER_NOSOUND='No sound';
Blockly.LUXE_SPEAKER_FREQUENCY='frequency';
Blockly.LUXE_SPEAKER_DURATION='duration';

//-----------------NOVA---------------------------------
Blockly.MIXLY_NOVA_PORT = 'Port';
Blockly.MIXLY_NOVA_STAT = 'Set';
Blockly.MIXLY_NOVA_GET_STAT = 'Get';

// LED
Blockly.MIXLY_NOVA_LED = 'LED';
Blockly.MIXLY_NOVA_LED_ON = 'ON';
Blockly.MIXLY_NOVA_LED_OFF = 'OFF';

// Button
Blockly.MIXLY_NOVA_BUTTON_PRESSED = 'Pressed';
Blockly.MIXLY_NOVA_BUTTON_RELEASED = 'Released';
Blockly.MIXLY_NOVA_BTN = 'Button ';
Blockly.MIXLY_NOVA_ABCD = '#';

Blockly.MIXLY_NOVA_TILTSWITCH = 'Tilt Switch';
Blockly.MIXLY_NOVA_SOUND = 'Sound'; 
Blockly.MIXLY_NOVA_LIMISWICTH = 'Limit Switch'; 
Blockly.MIXLY_NOVA_LIGHT = 'Light'; 

Blockly.MIXLY_NOVA_BUZZER = 'Buzzer'; 
Blockly.MIXLY_NOVA_FREQUENCY = 'Frequency(Hz)'; 
Blockly.MIXLY_NOVA_MIXLY_DURATION = 'Duration(ms)'; 

Blockly.MIXLY_NOVA_MOTOR = 'DC Motor'; 
Blockly.MIXLY_NOVA_MOTOR_SPEED = 'Speed(-100~100)%'; 

Blockly.MIXLY_NOVA_ULTRASONIC = 'Ultrasonic(cm)'; 

Blockly.MIXLY_NOVA_DHT11 = 'DHT11';
Blockly.MIXLY_NOVA_TYPE = 'Type';
Blockly.MIXLY_NOVA_DHT11_H = 'GetHumidity';
Blockly.MIXLY_NOVA_DHT11_T = 'GetTemperature';

Blockly.MIXLY_NOVA_SERVO = 'Servo';
Blockly.MIXLY_NOVA_DEGREE_0_180 = 'Degree（0~180）';
Blockly.MIXLY_NOVA_DELAY = 'Delay';
Blockly.MIXLY_NOVA_DELAY_MS = 'ms';

Blockly.MIXLY_NOVA_LINEFINDER = 'LineFinder';
Blockly.MIXLY_NOVA_L = 'LeftState';
Blockly.MIXLY_NOVA_R = 'RightState';
Blockly.MIXLY_NOVA_READ = 'GetLineState';

Blockly.MIXLY_NOVA_4DIGITDISPLAY = 'Digitdisplay';
Blockly.MIXLY_NOVA_NUMBER = 'Number';
Blockly.MIXLY_NOVA_DISPLAY_HOUR= 'Display Hour';
Blockly.MIXLY_NOVA_DISPLAY_MIN = 'Display Minute';

Blockly.MIXLY_NOVA_RTC = 'Real Time Clock';
Blockly.MIXLY_NOVA_RTC_SEC = 'Sec';
Blockly.MIXLY_NOVA_RTC_MIN = 'Min';
Blockly.MIXLY_NOVA_RTC_HOUR = 'Hour';
Blockly.MIXLY_NOVA_RTC_WEEK = 'Week';
Blockly.MIXLY_NOVA_RTC_DAY = 'Day';
Blockly.MIXLY_NOVA_RTC_MON = 'Mon';
Blockly.MIXLY_NOVA_RTC_YEAR = 'Year';

Blockly.MIXLY_NOVA_IR_REC = 'Infrared Receiver';

Blockly.MIXLY_NOVA_BLUETOOTH = 'Bluetooth';
Blockly.MIXLY_NOVA_BLUETOOTH_AVAILABLE = 'Available？';
Blockly.MIXLY_NOVA_BLUETOOTH_READ_STR = 'ReadString';
Blockly.MIXLY_NOVA_BLUETOOTH_READ_NUM = 'ReadNumber';

//spi
Blockly.TO_SPI_SLAVE_PIN='To SPI Slave PIN#';
Blockly.SPI_TRANSFER='transfer';

Blockly.MIXLY_SERIAL_BEGIN='baud rate';

//stepper
Blockly.MIXLY_STEPPER='Stepper';
Blockly.MIXLY_STEPPER_SETUP_STEPPER='Setup Stepper';
Blockly.MIXLY_STEPPER_PIN1='PIN1#';
Blockly.MIXLY_STEPPER_PIN2='PIN2#';
Blockly.MIXLY_STEPPER_PIN3='PIN3#';
Blockly.MIXLY_STEPPER_PIN4='PIN4#';
Blockly.MIXLY_STEPSPERREVOLUTION='steps per revolution';
Blockly.MIXLY_STEPPER_SET_SPEED='setSpeed';
Blockly.MIXLY_STEPPER_STEP='step';

//-----------------Ethernet------------------------------------
Blockly.MIXLY_ETHERNET_BEGIN='Begin (DHCP)';
Blockly.MIXLY_ETHERNET='Ethernet';
Blockly.MIXLY_ETHERNET2='Ethernet2';
Blockly.MIXLY_ETHERNET_MAC_ADDRESS='Mac Address';
Blockly.MIXLY_ETHERNET_LOCALIP='localIP';
Blockly.MIXLY_ETHERNET_CLINET_CONNECT_SERVER='Clinet.Connect Host';
Blockly.MIXLY_ETHERNET_CLINET_PORT='Port';
Blockly.MIXLY_ETHERNET_CLINET_STOP='Client.stop';
Blockly.MIXLY_ETHERNET_CLINET_CONNECTED='Client.connected';
Blockly.MIXLY_ETHERNET_CLINET_AVAILABLE='Client.available';
Blockly.MIXLY_ETHERNET_CLINET_PRINT='Client.print';
Blockly.MIXLY_ETHERNET_CLINET_PRINTLN='Client.println';
Blockly.MIXLY_ETHERNET_CLINET_READ='Client.read';
Blockly.MIXLY_ETHERNET_CLINET_GET_REQUEST='GET Request';
Blockly.MIXLY_ETHERNET_CLINET_URL='URL';
Blockly.MIXLY_ETHERNET_CLINET_SERVER='Host';

//DS18B20温度传感器
Blockly.MIXLY_DS18B20='DS18B20 PIN#';
Blockly.MIXLY_DS18B20_GET_TEMP='getTemperature';
Blockly.MIXLY_DS18B20_C='°C';
Blockly.MIXLY_DS18B20_F='°F';

//GPS
Blockly.MIXLY_GPS_INIT='GPS init';
Blockly.MIXLY_GPS_DATA_AVAILABLE='GPS data is available';
Blockly.MIXLY_GPS_DATA_ENCODE='GPS encode data successful';
Blockly.MIXLY_GPS_LOCATION='location';
Blockly.MIXLY_GPS_DATE='date';
Blockly.MIXLY_GPS_TIME='time';
Blockly.MIXLY_GPS_ISVALID='isValid';
Blockly.MIXLY_GPS_GET='GPS get';
Blockly.MIXLY_GPS_LOCATION_LAT='location-latitude';
Blockly.MIXLY_GPS_LOCATION_LNG='location-longitude';
Blockly.MIXLY_GPS_DATE_YEAR='date-year';
Blockly.MIXLY_GPS_DATE_MONTH='date-month';
Blockly.MIXLY_GPS_DATE_DAY='date-day';
Blockly.MIXLY_GPS_TIME_HOUR='time-hour';
Blockly.MIXLY_GPS_TIME_MINUTE='time-minute';
Blockly.MIXLY_GPS_TIME_SECOND='time-second';
Blockly.MIXLY_GPS_TIME_CENTISECOND='time-centisecond';

//factory
Blockly.MIXLY_PARAMS = 'parameters';

//MsTimer2
Blockly.MIXLY_MSTIMER2_EVERY='every';
Blockly.MIXLY_MSTIMER2_DO='do';
Blockly.MIXLY_MSTIMER2_START='start';
Blockly.MIXLY_MSTIMER2_STOP='stop';

//interrupts
Blockly.MIXLY_CONTROL_INTERRUPTS = 'interrupts';
Blockly.MIXLY_CONTROL_NOINTERRUPTS = 'nointerrupts';

//others
Blockly.MIXLY_WARNING_NOT_DECLARE='This variable is not declared!';
Blockly.MIXLY_LENGTH = "length of";
Blockly.MIXLY_EQUALS="equals";
Blockly.MIXLY_STARTSWITH="startsWith";
Blockly.MIXLY_ENDSWITH="endsWith";
Blockly.MIXLY_COMPARETO="compareTo";
Blockly.Msg.UNDO = "Undo";
Blockly.Msg.REDO = "Redo";
Blockly.MIXLY_CONTROL_END_PROGRAM = "end program";

//oled
Blockly.Msg.texttodisplay = "texts to display:";
Blockly.Msg.OLEDDISPLAY = "display";
Blockly.Msg.todisplay = "to display:";
Blockly.Msg.rawx = "raw x(127 max)";
Blockly.Msg.liney = "line y(63 max)";
Blockly.Msg.line1 = "line1=";
Blockly.Msg.line2 = "line2=";
Blockly.Msg.line3 = "line3=";
Blockly.Msg.line4 = "line4=";
Blockly.Msg.num1 = "Number 1(at end)=";
Blockly.Msg.num2 = "Number 2(at end)=";
Blockly.Msg.num3 = "Number 3(at end)=";
Blockly.Msg.num4 = "Number 4(at end)=";
// RGB
Blockly.MIXLY_RGB = 'RGB Light';
Blockly.MIXLY_RGB_NUM = 'Light number';
Blockly.MIXLY_RGB_COUNT = 'Light Count';
Blockly.MIXLY_RGB_R = 'R value';
Blockly.MIXLY_RGB_G = 'G value';
Blockly.MIXLY_RGB_B = 'B value';

//四位数码管
Blockly.MIXLY_4DIGITDISPLAY = 'Digitdisplay';
Blockly.MIXLY_4DIGITDISPLAY_DISPLAYSTRING = 'displayString';
Blockly.MIXLY_4DIGITDISPLAY_NOMBER1 = 'No.';
Blockly.MIXLY_4DIGITDISPLAY_NOMBER2 = '';
Blockly.MIXLY_4DIGITDISPLAY_DOT = 'Dot';
Blockly.MIXLY_4DIGITDISPLAY_ON = 'On';
Blockly.MIXLY_4DIGITDISPLAY_OFF = 'Off';